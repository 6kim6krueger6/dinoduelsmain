{"version":3,"file":"static/js/162.4d44cfea.chunk.js","mappings":"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","sources":["../node_modules/@simplewebauthn/browser/dist/bundle/index.js"],"sourcesContent":["/* [@simplewebauthn/browser@9.0.1] */\nfunction utf8StringToBuffer(value) {\n    return new TextEncoder().encode(value);\n}\n\nfunction bufferToBase64URLString(buffer) {\n    const bytes = new Uint8Array(buffer);\n    let str = '';\n    for (const charCode of bytes) {\n        str += String.fromCharCode(charCode);\n    }\n    const base64String = btoa(str);\n    return base64String.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n}\n\nfunction base64URLStringToBuffer(base64URLString) {\n    const base64 = base64URLString.replace(/-/g, '+').replace(/_/g, '/');\n    const padLength = (4 - (base64.length % 4)) % 4;\n    const padded = base64.padEnd(base64.length + padLength, '=');\n    const binary = atob(padded);\n    const buffer = new ArrayBuffer(binary.length);\n    const bytes = new Uint8Array(buffer);\n    for (let i = 0; i < binary.length; i++) {\n        bytes[i] = binary.charCodeAt(i);\n    }\n    return buffer;\n}\n\nfunction browserSupportsWebAuthn() {\n    return (window?.PublicKeyCredential !== undefined &&\n        typeof window.PublicKeyCredential === 'function');\n}\n\nfunction toPublicKeyCredentialDescriptor(descriptor) {\n    const { id } = descriptor;\n    return {\n        ...descriptor,\n        id: base64URLStringToBuffer(id),\n        transports: descriptor.transports,\n    };\n}\n\nfunction isValidDomain(hostname) {\n    return (hostname === 'localhost' ||\n        /^([a-z0-9]+(-[a-z0-9]+)*\\.)+[a-z]{2,}$/i.test(hostname));\n}\n\nclass WebAuthnError extends Error {\n    constructor({ message, code, cause, name, }) {\n        super(message, { cause });\n        this.name = name ?? cause.name;\n        this.code = code;\n    }\n}\n\nfunction identifyRegistrationError({ error, options, }) {\n    const { publicKey } = options;\n    if (!publicKey) {\n        throw Error('options was missing required publicKey property');\n    }\n    if (error.name === 'AbortError') {\n        if (options.signal instanceof AbortSignal) {\n            return new WebAuthnError({\n                message: 'Registration ceremony was sent an abort signal',\n                code: 'ERROR_CEREMONY_ABORTED',\n                cause: error,\n            });\n        }\n    }\n    else if (error.name === 'ConstraintError') {\n        if (publicKey.authenticatorSelection?.requireResidentKey === true) {\n            return new WebAuthnError({\n                message: 'Discoverable credentials were required but no available authenticator supported it',\n                code: 'ERROR_AUTHENTICATOR_MISSING_DISCOVERABLE_CREDENTIAL_SUPPORT',\n                cause: error,\n            });\n        }\n        else if (publicKey.authenticatorSelection?.userVerification === 'required') {\n            return new WebAuthnError({\n                message: 'User verification was required but no available authenticator supported it',\n                code: 'ERROR_AUTHENTICATOR_MISSING_USER_VERIFICATION_SUPPORT',\n                cause: error,\n            });\n        }\n    }\n    else if (error.name === 'InvalidStateError') {\n        return new WebAuthnError({\n            message: 'The authenticator was previously registered',\n            code: 'ERROR_AUTHENTICATOR_PREVIOUSLY_REGISTERED',\n            cause: error,\n        });\n    }\n    else if (error.name === 'NotAllowedError') {\n        return new WebAuthnError({\n            message: error.message,\n            code: 'ERROR_PASSTHROUGH_SEE_CAUSE_PROPERTY',\n            cause: error,\n        });\n    }\n    else if (error.name === 'NotSupportedError') {\n        const validPubKeyCredParams = publicKey.pubKeyCredParams.filter((param) => param.type === 'public-key');\n        if (validPubKeyCredParams.length === 0) {\n            return new WebAuthnError({\n                message: 'No entry in pubKeyCredParams was of type \"public-key\"',\n                code: 'ERROR_MALFORMED_PUBKEYCREDPARAMS',\n                cause: error,\n            });\n        }\n        return new WebAuthnError({\n            message: 'No available authenticator supported any of the specified pubKeyCredParams algorithms',\n            code: 'ERROR_AUTHENTICATOR_NO_SUPPORTED_PUBKEYCREDPARAMS_ALG',\n            cause: error,\n        });\n    }\n    else if (error.name === 'SecurityError') {\n        const effectiveDomain = window.location.hostname;\n        if (!isValidDomain(effectiveDomain)) {\n            return new WebAuthnError({\n                message: `${window.location.hostname} is an invalid domain`,\n                code: 'ERROR_INVALID_DOMAIN',\n                cause: error,\n            });\n        }\n        else if (publicKey.rp.id !== effectiveDomain) {\n            return new WebAuthnError({\n                message: `The RP ID \"${publicKey.rp.id}\" is invalid for this domain`,\n                code: 'ERROR_INVALID_RP_ID',\n                cause: error,\n            });\n        }\n    }\n    else if (error.name === 'TypeError') {\n        if (publicKey.user.id.byteLength < 1 || publicKey.user.id.byteLength > 64) {\n            return new WebAuthnError({\n                message: 'User ID was not between 1 and 64 characters',\n                code: 'ERROR_INVALID_USER_ID_LENGTH',\n                cause: error,\n            });\n        }\n    }\n    else if (error.name === 'UnknownError') {\n        return new WebAuthnError({\n            message: 'The authenticator was unable to process the specified options, or could not create a new credential',\n            code: 'ERROR_AUTHENTICATOR_GENERAL_ERROR',\n            cause: error,\n        });\n    }\n    return error;\n}\n\nclass BaseWebAuthnAbortService {\n    createNewAbortSignal() {\n        if (this.controller) {\n            const abortError = new Error('Cancelling existing WebAuthn API call for new one');\n            abortError.name = 'AbortError';\n            this.controller.abort(abortError);\n        }\n        const newController = new AbortController();\n        this.controller = newController;\n        return newController.signal;\n    }\n    cancelCeremony() {\n        if (this.controller) {\n            const abortError = new Error('Manually cancelling existing WebAuthn API call');\n            abortError.name = 'AbortError';\n            this.controller.abort(abortError);\n            this.controller = undefined;\n        }\n    }\n}\nconst WebAuthnAbortService = new BaseWebAuthnAbortService();\n\nconst attachments = ['cross-platform', 'platform'];\nfunction toAuthenticatorAttachment(attachment) {\n    if (!attachment) {\n        return;\n    }\n    if (attachments.indexOf(attachment) < 0) {\n        return;\n    }\n    return attachment;\n}\n\nasync function startRegistration(creationOptionsJSON) {\n    if (!browserSupportsWebAuthn()) {\n        throw new Error('WebAuthn is not supported in this browser');\n    }\n    const publicKey = {\n        ...creationOptionsJSON,\n        challenge: base64URLStringToBuffer(creationOptionsJSON.challenge),\n        user: {\n            ...creationOptionsJSON.user,\n            id: utf8StringToBuffer(creationOptionsJSON.user.id),\n        },\n        excludeCredentials: creationOptionsJSON.excludeCredentials?.map(toPublicKeyCredentialDescriptor),\n    };\n    const options = { publicKey };\n    options.signal = WebAuthnAbortService.createNewAbortSignal();\n    let credential;\n    try {\n        credential = (await navigator.credentials.create(options));\n    }\n    catch (err) {\n        throw identifyRegistrationError({ error: err, options });\n    }\n    if (!credential) {\n        throw new Error('Registration was not completed');\n    }\n    const { id, rawId, response, type } = credential;\n    let transports = undefined;\n    if (typeof response.getTransports === 'function') {\n        transports = response.getTransports();\n    }\n    let responsePublicKeyAlgorithm = undefined;\n    if (typeof response.getPublicKeyAlgorithm === 'function') {\n        try {\n            responsePublicKeyAlgorithm = response.getPublicKeyAlgorithm();\n        }\n        catch (error) {\n            warnOnBrokenImplementation('getPublicKeyAlgorithm()', error);\n        }\n    }\n    let responsePublicKey = undefined;\n    if (typeof response.getPublicKey === 'function') {\n        try {\n            const _publicKey = response.getPublicKey();\n            if (_publicKey !== null) {\n                responsePublicKey = bufferToBase64URLString(_publicKey);\n            }\n        }\n        catch (error) {\n            warnOnBrokenImplementation('getPublicKey()', error);\n        }\n    }\n    let responseAuthenticatorData;\n    if (typeof response.getAuthenticatorData === 'function') {\n        try {\n            responseAuthenticatorData = bufferToBase64URLString(response.getAuthenticatorData());\n        }\n        catch (error) {\n            warnOnBrokenImplementation('getAuthenticatorData()', error);\n        }\n    }\n    return {\n        id,\n        rawId: bufferToBase64URLString(rawId),\n        response: {\n            attestationObject: bufferToBase64URLString(response.attestationObject),\n            clientDataJSON: bufferToBase64URLString(response.clientDataJSON),\n            transports,\n            publicKeyAlgorithm: responsePublicKeyAlgorithm,\n            publicKey: responsePublicKey,\n            authenticatorData: responseAuthenticatorData,\n        },\n        type,\n        clientExtensionResults: credential.getClientExtensionResults(),\n        authenticatorAttachment: toAuthenticatorAttachment(credential.authenticatorAttachment),\n    };\n}\nfunction warnOnBrokenImplementation(methodName, cause) {\n    console.warn(`The browser extension that intercepted this WebAuthn API call incorrectly implemented ${methodName}. You should report this error to them.\\n`, cause);\n}\n\nfunction bufferToUTF8String(value) {\n    return new TextDecoder('utf-8').decode(value);\n}\n\nfunction browserSupportsWebAuthnAutofill() {\n    const globalPublicKeyCredential = window\n        .PublicKeyCredential;\n    if (globalPublicKeyCredential.isConditionalMediationAvailable === undefined) {\n        return new Promise((resolve) => resolve(false));\n    }\n    return globalPublicKeyCredential.isConditionalMediationAvailable();\n}\n\nfunction identifyAuthenticationError({ error, options, }) {\n    const { publicKey } = options;\n    if (!publicKey) {\n        throw Error('options was missing required publicKey property');\n    }\n    if (error.name === 'AbortError') {\n        if (options.signal instanceof AbortSignal) {\n            return new WebAuthnError({\n                message: 'Authentication ceremony was sent an abort signal',\n                code: 'ERROR_CEREMONY_ABORTED',\n                cause: error,\n            });\n        }\n    }\n    else if (error.name === 'NotAllowedError') {\n        return new WebAuthnError({\n            message: error.message,\n            code: 'ERROR_PASSTHROUGH_SEE_CAUSE_PROPERTY',\n            cause: error,\n        });\n    }\n    else if (error.name === 'SecurityError') {\n        const effectiveDomain = window.location.hostname;\n        if (!isValidDomain(effectiveDomain)) {\n            return new WebAuthnError({\n                message: `${window.location.hostname} is an invalid domain`,\n                code: 'ERROR_INVALID_DOMAIN',\n                cause: error,\n            });\n        }\n        else if (publicKey.rpId !== effectiveDomain) {\n            return new WebAuthnError({\n                message: `The RP ID \"${publicKey.rpId}\" is invalid for this domain`,\n                code: 'ERROR_INVALID_RP_ID',\n                cause: error,\n            });\n        }\n    }\n    else if (error.name === 'UnknownError') {\n        return new WebAuthnError({\n            message: 'The authenticator was unable to process the specified options, or could not create a new assertion signature',\n            code: 'ERROR_AUTHENTICATOR_GENERAL_ERROR',\n            cause: error,\n        });\n    }\n    return error;\n}\n\nasync function startAuthentication(requestOptionsJSON, useBrowserAutofill = false) {\n    if (!browserSupportsWebAuthn()) {\n        throw new Error('WebAuthn is not supported in this browser');\n    }\n    let allowCredentials;\n    if (requestOptionsJSON.allowCredentials?.length !== 0) {\n        allowCredentials = requestOptionsJSON.allowCredentials?.map(toPublicKeyCredentialDescriptor);\n    }\n    const publicKey = {\n        ...requestOptionsJSON,\n        challenge: base64URLStringToBuffer(requestOptionsJSON.challenge),\n        allowCredentials,\n    };\n    const options = {};\n    if (useBrowserAutofill) {\n        if (!(await browserSupportsWebAuthnAutofill())) {\n            throw Error('Browser does not support WebAuthn autofill');\n        }\n        const eligibleInputs = document.querySelectorAll('input[autocomplete$=\\'webauthn\\']');\n        if (eligibleInputs.length < 1) {\n            throw Error('No <input> with \"webauthn\" as the only or last value in its `autocomplete` attribute was detected');\n        }\n        options.mediation = 'conditional';\n        publicKey.allowCredentials = [];\n    }\n    options.publicKey = publicKey;\n    options.signal = WebAuthnAbortService.createNewAbortSignal();\n    let credential;\n    try {\n        credential = (await navigator.credentials.get(options));\n    }\n    catch (err) {\n        throw identifyAuthenticationError({ error: err, options });\n    }\n    if (!credential) {\n        throw new Error('Authentication was not completed');\n    }\n    const { id, rawId, response, type } = credential;\n    let userHandle = undefined;\n    if (response.userHandle) {\n        userHandle = bufferToUTF8String(response.userHandle);\n    }\n    return {\n        id,\n        rawId: bufferToBase64URLString(rawId),\n        response: {\n            authenticatorData: bufferToBase64URLString(response.authenticatorData),\n            clientDataJSON: bufferToBase64URLString(response.clientDataJSON),\n            signature: bufferToBase64URLString(response.signature),\n            userHandle,\n        },\n        type,\n        clientExtensionResults: credential.getClientExtensionResults(),\n        authenticatorAttachment: toAuthenticatorAttachment(credential.authenticatorAttachment),\n    };\n}\n\nfunction platformAuthenticatorIsAvailable() {\n    if (!browserSupportsWebAuthn()) {\n        return new Promise((resolve) => resolve(false));\n    }\n    return PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable();\n}\n\nexport { WebAuthnAbortService, WebAuthnError, base64URLStringToBuffer, browserSupportsWebAuthn, browserSupportsWebAuthnAutofill, bufferToBase64URLString, platformAuthenticatorIsAvailable, startAuthentication, startRegistration };\n"],"names":["bufferToBase64URLString","buffer","bytes","Uint8Array","str","charCode","String","fromCharCode","btoa","replace","base64URLStringToBuffer","base64URLString","base64","padLength","length","padded","padEnd","binary","atob","ArrayBuffer","i","charCodeAt","browserSupportsWebAuthn","undefined","window","PublicKeyCredential","toPublicKeyCredentialDescriptor","descriptor","id","transports","isValidDomain","hostname","test","WebAuthnError","Error","constructor","_ref","message","code","cause","name","super","this","WebAuthnAbortService","createNewAbortSignal","controller","abortError","abort","newController","AbortController","signal","cancelCeremony","attachments","toAuthenticatorAttachment","attachment","indexOf","async","startRegistration","creationOptionsJSON","value","options","publicKey","challenge","user","TextEncoder","encode","excludeCredentials","map","credential","navigator","credentials","create","err","_ref2","error","AbortSignal","authenticatorSelection","requireResidentKey","userVerification","pubKeyCredParams","filter","param","type","effectiveDomain","location","rp","byteLength","identifyRegistrationError","rawId","response","responsePublicKeyAlgorithm","responsePublicKey","responseAuthenticatorData","getTransports","getPublicKeyAlgorithm","warnOnBrokenImplementation","getPublicKey","_publicKey","getAuthenticatorData","attestationObject","clientDataJSON","publicKeyAlgorithm","authenticatorData","clientExtensionResults","getClientExtensionResults","authenticatorAttachment","methodName","console","warn","browserSupportsWebAuthnAutofill","globalPublicKeyCredential","isConditionalMediationAvailable","Promise","resolve","startAuthentication","requestOptionsJSON","allowCredentials","useBrowserAutofill","arguments","document","querySelectorAll","mediation","get","_ref3","rpId","identifyAuthenticationError","userHandle","TextDecoder","decode","signature","platformAuthenticatorIsAvailable","isUserVerifyingPlatformAuthenticatorAvailable"],"sourceRoot":""}